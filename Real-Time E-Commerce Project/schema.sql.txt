-- Step 1: Create the Database
CREATE DATABASE EcommerceDB;
GO

USE EcommerceDB;
GO

-- Step 2: Create Users Table
CREATE TABLE Users (
    UserID INT IDENTITY(1,1) PRIMARY KEY,       -- User ID, auto-incremented
    Name NVARCHAR(100) NOT NULL,                 -- Name of the user
    Email NVARCHAR(255) UNIQUE NOT NULL,         -- Unique email address
    Password NVARCHAR(255) NOT NULL,             -- User password
    Role NVARCHAR(50) CHECK (Role IN ('Customer', 'Vendor', 'Admin')) NOT NULL, -- User role
    CreatedAt DATETIME DEFAULT GETDATE()         -- Account creation date (default is the current date)
);
GO

-- Step 3: Create Vendors Table
CREATE TABLE Vendors (
    VendorID INT IDENTITY(1,1) PRIMARY KEY,     -- Vendor ID, auto-incremented
    UserID INT NOT NULL,                         -- Foreign Key referencing Users table
    StoreName NVARCHAR(100) NOT NULL,            -- Store name
    ContactInfo NVARCHAR(255),                   -- Contact information
    BankDetails NVARCHAR(255),                   -- Bank details
    JoinedDate DATETIME DEFAULT GETDATE(),       -- Date the vendor joined (default is the current date)
    FOREIGN KEY (UserID) REFERENCES Users(UserID)  -- Foreign Key constraint linking to Users
);
GO

-- Step 4: Create Products Table
CREATE TABLE Products (
    ProductID INT IDENTITY(1,1) PRIMARY KEY,    -- Product ID, auto-incremented
    VendorID INT NOT NULL,                       -- Foreign Key referencing Vendors table
    Name NVARCHAR(100) NOT NULL,                 -- Product name
    Description NVARCHAR(MAX),                   -- Product description
    Price DECIMAL(10, 2) NOT NULL,               -- Product price
    Stock INT NOT NULL DEFAULT 0,                -- Product stock quantity
    Category NVARCHAR(100),                      -- Product category
    CreatedAt DATETIME DEFAULT GETDATE(),        -- Product creation date
    FOREIGN KEY (VendorID) REFERENCES Vendors(VendorID) -- Foreign Key constraint linking to Vendors
);
GO

-- Step 5: Create Orders Table
CREATE TABLE Orders (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,      -- Order ID, auto-incremented
    CustomerID INT NOT NULL,                     -- Foreign Key referencing Users table (Customer)
    OrderDate DATETIME DEFAULT GETDATE(),        -- Order date (default is the current date)
    TotalAmount DECIMAL(10, 2) NOT NULL,         -- Total amount for the order
    PaymentStatus NVARCHAR(50) CHECK (PaymentStatus IN ('Pending', 'Paid', 'Failed')), -- Payment status
    ShippingStatus NVARCHAR(50) CHECK (ShippingStatus IN ('Pending', 'Shipped', 'Delivered', 'Returned')), -- Shipping status
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID) -- Foreign Key constraint linking to Users
);
GO

-- Step 6: Create Order Details Table
CREATE TABLE OrderDetails (
    OrderDetailID INT IDENTITY(1,1) PRIMARY KEY, -- Order detail ID, auto-incremented
    OrderID INT NOT NULL,                         -- Foreign Key referencing Orders table
    ProductID INT NOT NULL,                       -- Foreign Key referencing Products table
    Quantity INT NOT NULL DEFAULT 1,              -- Quantity of the product in the order
    Price DECIMAL(10, 2) NOT NULL,                -- Price of the product at the time of order
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), -- Foreign Key constraint linking to Orders
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID) -- Foreign Key constraint linking to Products
);
GO

-- Step 7: Create Payments Table
CREATE TABLE Payments (
    PaymentID INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT NOT NULL, -- Foreign Key from Orders table
    PaymentMethod NVARCHAR(50) CHECK (PaymentMethod IN ('Credit Card', 'PayPal', 'Bank Transfer', 'Cash on Delivery')),
    PaymentDate DATETIME DEFAULT GETDATE(),
    PaymentStatus NVARCHAR(50) CHECK (PaymentStatus IN ('Pending', 'Completed', 'Failed')),
    Amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
GO

-- Step 8: Create Shipping Table
CREATE TABLE Shipping (
    ShippingID INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT NOT NULL, -- Foreign Key from Orders table
    ShippingAddress NVARCHAR(255) NOT NULL,
    ShippingDate DATETIME DEFAULT GETDATE(),
    ShippingStatus NVARCHAR(50) CHECK (ShippingStatus IN ('Pending', 'Shipped', 'Delivered', 'Returned')),
    Carrier NVARCHAR(100),
    TrackingNumber NVARCHAR(100),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
GO

-- Step 9: Create Wishlists Table
CREATE TABLE Wishlists (
    WishlistID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL, -- Foreign Key from Users table
    ProductID INT NOT NULL, -- Foreign Key from Products table
    AddedDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
GO

-- Step 10: Create Reviews Table
CREATE TABLE Reviews (
    ReviewID INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT NOT NULL, -- Foreign Key from Products table
    CustomerID INT NOT NULL, -- Foreign Key from Users table
    Rating INT CHECK (Rating BETWEEN 1 AND 5), -- Rating between 1 and 5 stars
    ReviewText NVARCHAR(MAX),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID)
);
GO

-- Step 11: Insert Sample Data into Tables

-- Insert data into Users
INSERT INTO Users (Name, Email, Password, Role) VALUES 
    ('Ali Raza', 'ali.raza@xxxx.com', 'hashed_password1', 'Customer'),
    ('Maria Khan', 'maria.khan@xxxx.com', 'hashed_password2', 'Customer'),
    ('Hassan Malik', 'hassan.malik@xxxx.com', 'hashed_password3', 'Vendor'),
    ('Ayesha Farooq', 'ayesha.farooq@xxxx.com', 'hashed_password4', 'Vendor'),
    ('Zain Ahmed', 'zain.ahmed@xxxx.com', 'hashed_password5', 'Admin');
GO

-- Insert data into Vendors
INSERT INTO Vendors (UserID, StoreName, ContactInfo, BankDetails) VALUES
    (3, 'Tech Savvy', 'contact@techsavvy.com', 'Account12345'),
    (4, 'Trendy Attire', 'support@trendyattire.com', 'Account67890');
GO

-- Insert data into Products
INSERT INTO Products (VendorID, Name, Description, Price, Stock, Category) VALUES
    (1, 'Gaming Headset', 'High-quality sound with noise cancellation.', 45.99, 100, 'Electronics'),
    (2, 'Denim Jacket', 'Stylish and durable for all seasons.', 59.99, 40, 'Clothing');
GO

-- Insert data into Payments
INSERT INTO Payments (OrderID, PaymentMethod, PaymentStatus, Amount)
VALUES
    (1, 'Credit Card', 'Completed', 145.98),
    (2, 'PayPal', 'Completed', 59.99);
GO

-- Insert data into Shipping
INSERT INTO Shipping (OrderID, ShippingAddress, ShippingStatus, Carrier, TrackingNumber)
VALUES
    (1, '123 Main St, City, Country', 'Shipped', 'UPS', '1Z12345E0205271688'),
    (2, '456 Elm St, City, Country', 'Delivered', 'FedEx', '6123456789012345');
GO

-- Insert data into Wishlists
INSERT INTO Wishlists (CustomerID, ProductID)
VALUES
    (1, 2), -- Customer 1 adds Product 2 to wishlist
    (2, 1); -- Customer 2 adds Product 1 to wishlist
GO

-- Insert data into Reviews
INSERT INTO Reviews (ProductID, CustomerID, Rating, ReviewText)
VALUES
    (1, 1, 5, 'Great gaming headset! Highly recommend.'),
    (2, 2, 4, 'Stylish smartwatch, but a bit pricey.');
GO
